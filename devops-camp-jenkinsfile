pipeline {
    agent {
        label 'jenkins-agent'
    }
    environment {
        PIPELINE_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        HARBOR_REGISTRY = 'harbor.dev.afsmtddso.com'
        HARBOR_PROJECT = 'ccaraccioli-devsecops'
        APP_IMAGE_NAME = 'app'
        APP_CONTAINER_NAME = 'ccaraccioli-web-app'
        DB_CONTAINER_NAME = 'ccaraccioli-postgres-db'
        NETWORK = 'ccaraccioli-feature-tests'
        LOG_FILE_NAME = 'featuretestinglog.txt'
    }
    stages {
        stage('Application Repository') {
            steps {
                echo "Cloning Application Repository"
                sh 'git clone https://github.com/ccaraccioli/afs-labs-student.git'
                dir('afs-labs-student') {
                    script{
                        env.APP_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    }
                }
            }
        }
        stage('Application Docker Build') {
            steps {
                echo "Building Application Image"
                withCredentials([usernameColonPassword(credentialsId: 'ccaraccioli-harbor-auth', variable: 'HARBOR-AUTH')]) {
                    script {
                        docker.build('$APP_IMAGE_NAME-$APP_HASH', '-f ./app/Dockerfile ./afs-labs-student')
                        docker.withRegistry('https://$HARBOR_REGISTRY', 'ccaraccioli-harbor-auth') {
                            sh 'docker tag $APP_IMAGE_NAME-$APP_HASH $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
                            sh 'docker push $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
                        }
                    }
                }
            }
            post {
                always {
                    echo "Clean Local $APP_IMAGE_NAME Image"
                    script {
                        try {
                            sh 'docker rmi $APP_IMAGE_NAME-$APP_HASH:latest'
                        } catch (err) {
                            echo err.getMessage()
                        }
                    }
                }
            }
        }
        stage('Security Scanning'){
            steps {
                echo "Security Scanning Stage"
                withCredentials([usernamePassword(credentialsId: 'ccaraccioli-harbor-auth', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    echo "Scanning $APP_IMAGE_NAME image"
                    sh 'python harbor_scanner.py -i $APP_IMAGE_NAME -r $HARBOR_REGISTRY -p $HARBOR_PROJECT -c ${USERNAME}:${PASSWORD}'
                }
            }
        }
        stage('Feature Testing'){
            steps {
                echo "Feature Testing Stage"
                sh '''
                rm -rf $LOG_FILE_NAME ; \
                docker rm -f $DB_CONTAINER_NAME ; \
                docker rm -f $APP_CONTAINER_NAME ; \
                docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH ; \
                docker network rm $NETWORK
                '''
                sh 'docker network create $NETWORK'
                withCredentials([usernamePassword(credentialsId: 'db-auth', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                sh '''
                docker run -d --name "$DB_CONTAINER_NAME" \
                -p "5432" \
                -e "POSTGRES_USER=${USERNAME}" \
                -e "POSTGRES_PASSWORD=${PASSWORD}" \
                -e "POSTGRES_DB=shop" \
                --network "$NETWORK" \
                postgres:9.6
                '''
                sh '''
                docker run -d --name "$APP_CONTAINER_NAME" \
                -p "5000" \
                -e "POSTGRES_USER=${USERNAME}" \
                -e "POSTGRES_PASSWORD=${PASSWORD}" \
                -e "DB_CONTAINER_NAME=$DB_CONTAINER_NAME" \
                -e "LOCATION_FEATURE_ENABLED=True" \
                --network "$NETWORK" \
                $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH
                '''
                }
                script {
                    try {
                        sh 'sleep 5 && docker exec $APP_CONTAINER_NAME python featuretests.py'
                    } catch (err) {
                        echo err.getMessage()
                        error(err)
                    }
                }
            }
            post {
                always {
                    echo "Print output and clean feature test containers"
                    script {
                        try {
                            sh 'docker exec $APP_CONTAINER_NAME ls -lah'
                            sh 'docker cp $APP_CONTAINER_NAME:./app/log_file.txt $LOG_FILE_NAME'
                            sh 'cat $LOG_FILE_NAME'
                            sh 'rm -rf $LOG_FILE_NAME'
                            sh 'docker rm -f $DB_CONTAINER_NAME'
                            sh 'docker rm -f $APP_CONTAINER_NAME'
                            sh 'docker rmi $HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
                            sh 'docker network rm $NETWORK'
                        } catch (err) {
                            echo err.getMessage()
                        }
                    }
                }
            }
            
        }
        stage('Deploy') {
            steps {
                echo "Deployment Stage"
                sh 'kubectl -n ccaraccioli set image deployment/app-deployment app-deployment=$HARBOR_REGISTRY/$HARBOR_PROJECT/$APP_IMAGE_NAME:$APP_HASH-$PIPELINE_HASH'
            }
        }
    }
    post {
        cleanup {
            echo "Clean Workspace"
            sh 'docker system prune -f'
            sh 'rm -rf .git ./*'
        }
    }
}